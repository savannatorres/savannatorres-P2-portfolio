---
title: "R Coding Exercise"
---

# Assignment#3: Coding Basics

## Loading and checking data

```{r}
#loading packages
library("dslabs")
library("dplyr")
library("ggplot2")

#help file for gapminder data
help(gapminder)
```

```{r}
#get an overview of data structure
str(gapminder)
```

```{r}
#get a summary of data
summary(gapminder)
```

```{r}
#determine the type of object gapminder is
class(gapminder)
```

## Processing Data

```{r}
# Assigning only the African countries to a new object/variable called africadata
africadata <- gapminder %>% filter(continent == "Africa")
```

```{r}
#get an overview of africadata
str(africadata)
```

```{r}
# Summary of the new object africadata
summary(africadata)
```

### Creating two new objects:

```{r}
# Creating a new object containing 'infant_mortality' and 'life_expectancy'
infant_mortality_life_expectancy <- africadata %>% select(infant_mortality, life_expectancy)

# Display the structure of the 'infant_mortality_life_expectancy' object
str(infant_mortality_life_expectancy)

# Display the summary of the 'infant_mortality_life_expectancy' object
summary(infant_mortality_life_expectancy)
```

```{r}
# Creating a new object containing 'population' and 'life_expectancy'
population_life_expectancy <- africadata %>% select(population, life_expectancy)

# Display the structure of the 'population_life_expectancy' object
str(population_life_expectancy)

# Display the summary of the 'population_life' object
summary(population_life_expectancy)
```

## Plotting

Using the new variables you created, plot life expectancy as a function of infant mortality and as a function of population size. Make two separate plots. Plot the data as points. For the plot with population size on the x-axis, set the x-axis to a log scale.

```{r}
# Creating the plot for life expectancy as a function of infant mortality
ggplot(data = infant_mortality_life_expectancy, aes(x = infant_mortality, y = life_expectancy)) +
  geom_point() +
  labs(title = "Life Expectancy vs Infant Mortality",
       x = "Infant Mortality",
       y = "Life Expectancy") +
  theme_minimal()
```

Observations: We can see a negative correlation between infant mortality and life expectancy, which makes sense.

```{r}
# Creating the plot for life expectancy as a function of population size with x-axis log scale
ggplot(data = population_life_expectancy, aes(x = population, y = life_expectancy)) +
  geom_point() +
  scale_x_log10() +
  labs(title = "Life Expectancy vs Population Size (Log Scale)",
       x = "Population (Log Scale)",
       y = "Life Expectancy") +
  theme_minimal()
```

Observations: You can see a positive correlation between population size and life expectancy. The pattern we see in the data is due to the fact that we have different years for individual countries, and that over time these countries increase in population size and also life expectancy.

## More data processing

```{r}
# Looking for years with missing data for infant mortality
years_missing_infant_mortality <- africadata %>%
  filter(is.na(infant_mortality)) %>%
  group_by(year) %>%
  summarise(missing_count = n())

# Display the years with missing data for infant mortality
print(years_missing_infant_mortality)
```

```{r}
# Extracting data for the year 2000
africadata_year2000 <- africadata %>% filter(year == 2000)

# Display the structure of the new object
str(africadata_year2000)
```

```{r}
# Display the summary of the new object
summary(africadata_year2000)
```

## More plotting

```{r}
# Creating the plot for life expectancy as a function of infant mortality for the year 2000
ggplot(data = africadata_year2000, aes(x = infant_mortality, y = life_expectancy)) +
  geom_point() +
  labs(title = "Life Expectancy vs Infant Mortality (Year 2000)",
       x = "Infant Mortality",
       y = "Life Expectancy") +
  theme_minimal()
```

```{r}
# Create the plot for life expectancy as a function of population size for the year 2000 with x-axis log scale
ggplot(data = africadata_year2000, aes(x = population, y = life_expectancy)) +
  geom_point() +
  scale_x_log10() +
  labs(title = "Life Expectancy vs Population Size (Log Scale, Year 2000)",
       x = "Population (Log Scale)",
       y = "Life Expectancy") +
  theme_minimal()
```

## Simple fit model

```{r}
# Fit a linear model with life expectancy as the outcome and infant mortality as the predictor
lm_fit1 <- lm(life_expectancy ~ infant_mortality, data = africadata_year2000)

# Display the summary of the first fit
summary(lm_fit1)

```

Based off of the p-value of 2.826e-08 this suggests infant_mortality is highly significant. There is a strong negative linear relationship between infant_mortality and life_expectancy in this model. We conclude higher levels of infant_morality are associated with lower life expectancy.

```{r}
# Fit a linear model with life expectancy as the outcome and population size as the predictor (log scale)
lm_fit2 <- lm(life_expectancy ~ log(population), data = africadata_year2000)

# Display the summary of the second fit
summary(lm_fit2)
```

Based off of the p-value of 0.4755 this suggests there is no significant linear relationship between log(population) and life_expectancy in this model. We conclude log(population) does not explain much of the variation in life_expectancy.

# This section is contributed by RINU THOMAS

**Explore the dataset:**

```{r}
#look at help file for admissions data
help(admissions)
```

```{r}
#get an overview of data structure
str(admissions)
```

```{r}
#get a summary of data
summary(admissions)
```

```{r}
#determine the type of object gapminder is
class(admissions)
```

**Checking to see if we need to clean the dataset:**

```{r}
# Check for missing values
missing_values <- sum(is.na(admissions))
print(paste("Number of missing values:", missing_values))

```

```{r}
# Check for inconsistencies
inconsistent_data <- admissions[admissions$admitted < 0 | admissions$admitted > 100, ]
print("Inconsistent data:")
print(inconsistent_data)
```

**Exploratory figures;**

```{r}
# Bar plot of admitted vs. major
ggplot(admissions, aes(x = major, y = admitted, fill = gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percent of Admitted Students by Major and Gender", x = "Major", y = "Percent Admitted")
```

```{r}
# Bar plot of applicants vs. major
ggplot(admissions, aes(x = major, y = applicants, fill = gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Number of Applicants by Major and Gender", x = "Major", y = "Number of Applicants")
```

```{r}
# Admission rate  plot
ggplot(admissions, aes(x = major, y = admitted / 100 * applicants, fill = gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Number of Admitted Students by Major and Gender", x = "Major", y = "Number of Admitted Students")
```

**Simple statistical model(s)**

```{r}
# Convert categorical variables to factors
admissions$major <- as.factor(admissions$major)
admissions$gender <- as.factor(admissions$gender)
```

```{r}
# Fit linear regression model
model <- lm(admitted ~ major + gender, data = admissions)
summary(model)
```

**Results:**

The linear regression model shows that the major has a significant impact on the percentage of students admitted, with majors C, D, E, and F having significantly lower admission rates compared to major A. Gender does not appear to have a significant impact on the admission rate in this model.
